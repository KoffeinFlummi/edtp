#!/usr/bin/env python3

"""edtp - Command line Elite: Dangerous trade route planner

Usage:
    edtp area  [-hpf] <system> [--range=<lys>]
    edtp route [-hf]  <system_from> <system_to> [--station_from=<name>] [--station_to=<name>]
    edtp pool  [-hf]  <system> <system>...
    edtp start [-hpf] <system> [--station=<name>] [--range=<lys>]
    edtp all [-hpf]
    edtp -h | --help

Commands:
    area  - Get the best trading routes in a radius around the given system
    route - Get the best trading routes between the two given systems
    pool  - Get the best trading routes in the given pool of systems
    start - Get the best trading routes that start in the given system (station)
    all   - Compare ALL trading routes between ALL stations (Expect this to run a while)

Options:
    system                Human-readable name of a system.
    system_from           "
    system_to             "
    -h --help             Show this help
    -p --permit           Include systems that require permits
    -f --force            Force a refresh of the cached trading data
    --range=<lys>         Maximum distance in lightyears [default: 50]
    --station=<name>      Human-readable name of a station.
    --station_from=<name> "
    --station_to=<name>   "
"""

import os
import sys
import json
import time
import numpy
import docopt
import requests

VERSION = "1.0"
CACHEDIR = "/tmp"
APIURL = "http://eddb.io/archive/v3/"


def refresh_data(force=False):
    print("Refreshing data ...")
    docs = [
        "commodities.json",
        "systems.json",
        "stations.json"
    ]
    for d in docs:
        print("Checking {} ... ".format(d), end="")
        path = os.path.join(CACHEDIR, "edtp_{}".format(d))
        url = APIURL + d
        redown = False
        if force:
            redown = True
        elif not os.path.exists(path):
            redown = True
        elif time.time() - os.path.getmtime(path) > 3600 * 24:
            redown = True
        if redown:
            print("redownloading ... ", end="", flush=True)
            j = requests.get(url).json()
            print("optimizing ... ", end="", flush=True)
            if d == "commodities.json":
                j = {x["id"]: {"name": x["name"], "price": x["average_price"]} for x in j if x["average_price"] is not None}
            elif d == "systems.json":
                j = {x["id"]: {"name": x["name"], "permit": x["needs_permit"], "pos": (x["x"], x["y"], x["z"])} for x in j \
                    if x["population"] is not None and x["population"] > 0}
            else:
                j = {x["id"]: {"name": x["name"], "system": x["system_id"], "distance": x["distance_to_star"], "prices": {y["commodity_id"]: (y["buy_price"], y["sell_price"]) for y in x["listings"]}} for x in j if x["has_commodities"] > 0}
            f = open(path, "w")
            json.dump(j, f)
            f.close()
            print("done.")
        else:
            print("still up2date.")


def parse_data():
    print("\nLoading data ... ", end="")
    f_co = open(os.path.join(CACHEDIR, "edtp_commodities.json"), "r")
    f_sy = open(os.path.join(CACHEDIR, "edtp_systems.json"), "r")
    f_st = open(os.path.join(CACHEDIR, "edtp_stations.json"), "r")
    comms = json.load(f_co)
    systems = json.load(f_sy)
    stations = json.load(f_st)
    f_co.close()
    f_sy.close()
    f_st.close()
    print("done.")
    return comms, systems, stations


def distance(v1, v2):
    p1 = numpy.array(v1)
    p2 = numpy.array(v2)
    return numpy.linalg.norm(p1 - p2)


def best_product(from_station, to_station):
    profit = 0
    comm = ""
    for i, p in from_station["prices"].items():
        if p[0] == 0:
            continue
        if i not in to_station["prices"]:
            continue
        s = to_station["prices"][i][1]
        if s == 0:
            continue
        if s - p[0] > profit:
            profit = s - p[0]
            comm = i
    return (comm, profit)


def best_routes(froms, tos):
    routes = []
    c = 0
    s = time.time()
    ex = routes.extend # don't ask
    for i, f in froms.items():
        routes.extend([(i, j) + best_product(f, t) for j,t in tos.items() if i != j])
        try:
            r = (time.time() - s) * (1 - c/len(froms)) / (c/len(froms))
        except:
            r = 0
        hours, remainder = divmod(r, 3600)
        minutes, seconds = divmod(remainder, 60)
        print("\rGetting trade routes ... {:>3}% {:02}:{:02}:{:02} remaining".format(round(100 * c/len(froms)), int(hours), int(minutes), int(seconds)), end="", flush=True)
        c += 1
    routes.sort(key=lambda x: -1 * x[3])
    return routes[:10]


def main(args):
    refresh_data(args["--force"])
    comms, systems, stations = parse_data()

    # Filter systems list
    print("Filtering system data ... ", end="", flush=True)
    if args["area"] or args["start"]:
        for i, s in systems.items():
            if s["name"].lower() == args["<system>"][0].lower():
                pos = s["pos"]
                from_system = i
                break
        else:
            print("\nNot able to find system.")
            return 1
        r = int(args["--range"])
        if not args["--permit"]:
            systems = {k: v for k,v in systems.items() if distance(v["pos"], pos) < r and v["permit"] == 0}
        else:
            systems = {k: v for k,v in systems.items() if distance(v["pos"], pos) < r}
        print("done. ({} systems remaining)".format(len(systems)))
    elif args["all"]:
        if not args["--permit"]:
            systems = {k: v for k,v in systems.items() if v["permit"] == 0}
        print("done. ({} systems remaining)".format(len(systems)))
    elif args["pool"]:
        s = [x.lower() for x in args["<system>"]]
        if not args["--permit"]:
            systems = {k: v for k,v in systems.items() if v["name"].lower() in s and v["permit"] == 0}
        else:
            systems = {k: v for k,v in systems.items() if v["name"].lower() in s}
        if len(systems) != len(s):
            print("\nCouldn't find all systems")
            return 1
    elif args["route"]:
        #edtp route [-hf]  <system_from> <system_to> [--station_from=<name>] [--station_to=<name>]
        from_systems = {k: v for k,v in systems.items() if v["name"].lower() == args["<system_from>"].lower()}
        to_systems = {k: v for k,v in systems.items() if v["name"].lower() == args["<system_to>"].lower()}
        print("done.")

    # Filter stations
    print("Filtering station data ... ", end="", flush=True)
    if args["area"] or args["start"]:
        stations = {k: v for k,v in stations.items() if str(v["system"]) in systems.keys()}
        froms = stations
        if args["start"] and args["--station"] is None:
            froms = {k: v for k,v in stations.items() if str(v["system"]) == from_system}
        elif args["start"]:
            froms = {}
            n = args["--station"].lower()
            for k,v in stations.items():
                if v["name"].lower() == n:
                    froms[k] = v
                    break
            else:
                print("\nCouldn't find station.")
                return 1
        tos = stations
        print("done. ({} stations remaining)".format(len(stations)))
    elif args["all"] or args["pool"]:
        stations = {k: v for k,v in stations.items() if str(v["system"]) in systems.keys()}
        froms = stations
        tos = stations
        print("done. ({} stations remaining)".format(len(stations)))
    elif args["route"]:
        froms = {k: v for k,v in stations.items() if str(v["system"]) in from_systems.keys()}
        tos = {k: v for k,v in stations.items() if str(v["system"]) in to_systems.keys()}
        if args["--station_from"] is not None:
            froms = {k: v for k,v in froms.items() if v["name"].lower() == args["--station_from"].lower()}
        if args["--station_to"] is not None:
            tos = {k: v for k,v in tos.items() if v["name"].lower() == args["--station_to"].lower()}
        print("done.")
            

    # Get trade routes
    print("Getting trade routes ... ", end="", flush=True)
    routes = best_routes(froms, tos)
    print("\rGetting trade routes ... done.              ")

    for i, r in enumerate(routes):
        from_station = stations[r[0]]["name"]
        from_system = systems[str(stations[r[0]]["system"])]["name"]
        from_dfs = stations[r[0]]["distance"]
        from_dfs = str(from_dfs) if from_dfs is not None else "???"
        to_station = stations[r[1]]["name"]
        to_system = systems[str(stations[r[1]]["system"])]["name"]
        to_dfs = stations[r[1]]["distance"]
        to_dfs = str(to_dfs) if to_dfs is not None else "???"
        comm_name = comms[r[2]]["name"]
        dist = distance(systems[str(stations[r[0]]["system"])]["pos"],
            systems[str(stations[r[1]]["system"])]["pos"])
        dist = round(dist, 3)
        profit = "Profit: {}/t".format(r[3])
        print("")
        print(" {:>2}. {:^20}...... {:>5} LYs .....{:^20}".format(i+1, from_system, dist, to_system))
        print("     {:^20} {:^21} {:^20}".format(from_station, comm_name, to_station))
        print("     {:^20} {:^21} {:^20}".format("("+from_dfs+" LSfS)", profit, "("+to_dfs+" LSfS)"))

    print("")
    return 0


if __name__ == "__main__":
    args = docopt.docopt(__doc__, version=VERSION)
    sys.exit(main(args))
